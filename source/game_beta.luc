module game_beta (
    input button,
    input speedSel[$clog2(5)],
    input updateSpeed,
    input clk,  // clock
    input rst,  // reset
    output readSpeed[$clog2(5)],
    output reg0_speed_frame_count[16],
    output reg9_and_computation[16], // AND product
    output reg11_current_line_index[16], // is the index of current row of leds
    //screen
    output r1_out[16],
    output r2_out[16],
    output r3_out[16],
    output r4_out[16],
    output r5_out[16],
    output r6_out[16],
    output r7_out[16],
    output r8_out[16],
    // for debugging
    output statedebug[16], // shows which fms state we are in
    output wdsel_output[16], // wddsdel output from alu to regfile write port
    output write_addr[4], // write address
    output alufn[6],
    output asel[3],
    output bsel[3],
    output wdselin[2], // input selectors on the wdsel mux
    output we,
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output read_a_data[16],
    output read_b_data[16]
    
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  sig wdsel[16];
  
  alu game_alu;
  
  .clk(clk){
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles players;
      
    }
  }
  always {
    //pass button press signal to CU unit
    game_controlunit.button = button;
    
    //Setup REGFILE unit
    players.we = game_controlunit.we;
    players.write_address = game_controlunit.regfile_write_address;
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfiledatab = players.out_b;
    game_controlunit.regfiledataa = players.out_a;
    
    //pass controls to fsm
    game_controlunit.speedSel = speedSel;
    game_controlunit.updateSpeed = updateSpeed;
    readSpeed = game_controlunit.readSpeed;
    
    
    //screenconnections
    r1_out = players.r1_out;
    r2_out = players.r2_out;
    r3_out = players.r3_out;
    r4_out = players.r4_out;
    r5_out = players.r5_out;
    r6_out = players.r6_out;
    r7_out = players.r7_out;
    r8_out = players.r8_out;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01  : inputAlu_a = 16h0001;
      default : //b10 unused
        inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = 16h0001;
      default: //necessary to init
        inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.x = inputAlu_a;
    game_alu.y = inputAlu_b;
    game_alu.op = game_controlunit.alufn;
    
    
    //wdsel mux
    case (game_controlunit.wdsel){
      b01 : wdsel = 16h0000;
      b11 : wdsel= 16h0001;
      b10 : wdsel = 16h000f;
      
      default : //b00
        wdsel = game_alu.s;
    }
    players.data = wdsel;
    
    reg0_speed_frame_count = players.reg0_speed_frame_count;
    // debugging outputs
    
    wdsel_output = wdsel;
    reg9_and_computation = players.reg9_and_computation;
    reg11_current_line_index = players.reg11_current_line_index; // prints reg 11 which contains the information of the game state
    statedebug = game_controlunit.state; // gets the integer value to show which state we are in
    write_addr = game_controlunit.regfile_write_address; // get the write address value
    alufn = game_controlunit.alufn;
    asel = game_controlunit.asel;
    bsel = game_controlunit.bsel;
    wdselin = game_controlunit.wdsel;
    we = game_controlunit.we;
    regfile_read_address_a = game_controlunit.regfile_read_address_a;
    regfile_read_address_b = game_controlunit.regfile_read_address_b;
    read_a_data = players.out_a;
    read_b_data = players.out_b;
    
  }
}