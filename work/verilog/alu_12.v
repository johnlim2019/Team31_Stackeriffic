/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_12 (
    input [15:0] x,
    input [15:0] y,
    input [5:0] op,
    output reg [15:0] s,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_adderUnit_out;
  wire [1-1:0] M_adderUnit_z;
  wire [1-1:0] M_adderUnit_v;
  wire [1-1:0] M_adderUnit_n;
  reg [16-1:0] M_adderUnit_a;
  reg [16-1:0] M_adderUnit_b;
  reg [6-1:0] M_adderUnit_alufn_signal;
  adder_16 adderUnit (
    .a(M_adderUnit_a),
    .b(M_adderUnit_b),
    .alufn_signal(M_adderUnit_alufn_signal),
    .out(M_adderUnit_out),
    .z(M_adderUnit_z),
    .v(M_adderUnit_v),
    .n(M_adderUnit_n)
  );
  
  wire [16-1:0] M_booleanUnit_out;
  reg [16-1:0] M_booleanUnit_a;
  reg [16-1:0] M_booleanUnit_b;
  reg [6-1:0] M_booleanUnit_alufn_signal;
  boolean_17 booleanUnit (
    .a(M_booleanUnit_a),
    .b(M_booleanUnit_b),
    .alufn_signal(M_booleanUnit_alufn_signal),
    .out(M_booleanUnit_out)
  );
  
  wire [16-1:0] M_shifterUnit_out;
  reg [16-1:0] M_shifterUnit_a;
  reg [4-1:0] M_shifterUnit_b;
  reg [6-1:0] M_shifterUnit_alufn_signal;
  shifter_18 shifterUnit (
    .a(M_shifterUnit_a),
    .b(M_shifterUnit_b),
    .alufn_signal(M_shifterUnit_alufn_signal),
    .out(M_shifterUnit_out)
  );
  
  wire [16-1:0] M_compareUnit_out;
  reg [1-1:0] M_compareUnit_z;
  reg [1-1:0] M_compareUnit_v;
  reg [1-1:0] M_compareUnit_n;
  reg [6-1:0] M_compareUnit_alufn_signal;
  compare_19 compareUnit (
    .z(M_compareUnit_z),
    .v(M_compareUnit_v),
    .n(M_compareUnit_n),
    .alufn_signal(M_compareUnit_alufn_signal),
    .out(M_compareUnit_out)
  );
  
  wire [16-1:0] M_multUnit_p;
  reg [16-1:0] M_multUnit_x;
  reg [16-1:0] M_multUnit_y;
  sixteen_bit_multiplier_20 multUnit (
    .x(M_multUnit_x),
    .y(M_multUnit_y),
    .p(M_multUnit_p)
  );
  
  reg [5:0] alufn_signal;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg z;
  
  reg v;
  
  reg n;
  
  always @* begin
    a = x;
    b = y;
    alufn_signal = op;
    M_adderUnit_alufn_signal = alufn_signal;
    M_adderUnit_a = a;
    M_adderUnit_b = b;
    z = M_adderUnit_z;
    v = M_adderUnit_v;
    n = M_adderUnit_n;
    zvn[0+0-:1] = z;
    zvn[1+0-:1] = v;
    zvn[2+0-:1] = n;
    M_compareUnit_alufn_signal = alufn_signal;
    M_compareUnit_z = z;
    M_compareUnit_v = v;
    M_compareUnit_n = n;
    M_booleanUnit_alufn_signal = alufn_signal;
    M_booleanUnit_a = a;
    M_booleanUnit_b = b;
    M_shifterUnit_alufn_signal = alufn_signal;
    M_shifterUnit_a = a;
    M_shifterUnit_b = b[0+3-:4];
    M_multUnit_x = a;
    M_multUnit_y = b;
    
    case (op)
      6'h00: begin
        s = M_adderUnit_out;
      end
      6'h01: begin
        s = M_adderUnit_out;
      end
      6'h18: begin
        s = M_booleanUnit_out;
      end
      6'h0e: begin
        s = M_booleanUnit_out;
      end
      6'h06: begin
        s = M_booleanUnit_out;
      end
      6'h1a: begin
        s = M_booleanUnit_out;
      end
      6'h20: begin
        s = M_shifterUnit_out;
      end
      6'h21: begin
        s = M_shifterUnit_out;
      end
      6'h23: begin
        s = M_shifterUnit_out;
      end
      6'h02: begin
        s = M_multUnit_p;
      end
      6'h33: begin
        s = M_compareUnit_out;
      end
      6'h35: begin
        s = M_compareUnit_out;
      end
      6'h37: begin
        s = M_compareUnit_out;
      end
      default: begin
        s = 16'hdead;
      end
    endcase
  end
endmodule
